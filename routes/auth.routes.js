const { Router } = require('express')

// –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:
const bcrypt = require('bcryptjs')

// –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –∏ password
const { check, validationResult } = require('express-validator')

// –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ jwt token
const jwt = require('jsonwebtoken')

// –ø–æ–¥–∫–ª—é—á–∞–µ–º config –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è jwsSecret
const config = require('config')

const router = Router()

const pool = require('../settings/db')

const c = require('config')


// –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
let tableOne = 'users'
let fieldOneTableOne = 'id'
let fieldTwoTableOne = 'email'
let fieldThreeTableOne = 'password'
let fieldFourTableOne = 'login'
let fieldFiveTableOne = 'registration'
let fieldSixTableOne = 'avatar'
let fieldTableOne = [ 
  fieldOneTableOne,
  fieldTwoTableOne,
  fieldThreeTableOne,
  fieldFourTableOne,
  fieldFiveTableOne,
  fieldSixTableOne,  
]

// /api/auth/

router.get('/user', async (req, res) => {
  try {
    pool.query('SELECT * FROM users').then((data) => {
      res.status(200).json(data[0])
    })
  } catch (error) {
    console.log('üì¢', error, '–ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è')
  }
})


// UPDATE `users` SET `login` = 'M—É—Å—è' WHERE `users`.`id` = 28; - //?–æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–Ω 

// INSERT INTO `messages` (`id`, `user_to_id`, `user_from_id`, `content`, `created_at`) VALUES (NULL, '28', '29', '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', current_timestamp()); //?–≤—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

// /users?age=32&name=Tom






// router.get('/findcollocuter/:user_query',
// [
//   // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
//   check('user_query','–≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ').custom(value => !/\s/.test(value))
// ],
//   async (req, res) => {
//
//   const user_query = req.params.user_query
//
//
//
//
//   try {
//
//     // –≤ —Å–ª—É—á–∞–µ –Ω–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª–ª—ã –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
//     const errors = validationResult(req)
//     if (!errors.isEmpty()) {
//       return res.status(400).json({
//         errors: errors.array(),
//         massage: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥',
//       })
//     }
//
//     pool.query(
//     // `SELECT users.login, messages.content_id
//     // FROM users
//     // JOIN messages
//     // ON messages.user_to_id
//     // WHERE users.login LIKE ?`, '%'+user_query+'%'
//
//
//     // `SELECT users.login, messages.content, messages.user_from_id
//     // FROM users
//     // JOIN messages
//     // ON messages.user_from_id
//     // WHERE users.login LIKE ?` ,
//
//     `SELECT ??, ?? FROM ?? WHERE ??.?? LIKE ?`,
//
//
//     [fieldOneTableOne,  fieldFourTableOne, tableOne, tableOne,  fieldFourTableOne, '%'+ user_query + '%']
//
//
//
//     ).then((data) => {
//
//       if (!data[0][0]) {
//         return res.status(405).json({ massage: " –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!!! "})
//       } else {
//       console.log('üì¢ [auth.routes.js:85]', data[0]);
//       res.status(200).json( {data: data[0], massage: `–ù–∞–π–¥–µ–Ω–æ ${data[0].length}`})}
//     })
//   } catch (error) {
//     console.log('üì¢', error, '–ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è')
//   }
// })






//api/auth/register

router.post(
  '/register',
  // –º–∞—Å—Å–∏–≤ –º–∏–¥–µ–ª–≤–µ–π—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–µ–ª–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é:
  [
    check('email', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email').isEmail(),
    check('password', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è 6 —Å–∏–º–≤–æ–ª–æ–≤').isLength({
      min: 6,
    }),
  ],
  async (req, res) => {
    try {
      //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const errors = validationResult(req)

      //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      if (!errors.isEmpty()) {
        return res.status(400).json({
          errors: errors.array(),
          massage: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        })
      }
      const { email, password } = req.body


      // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —é–∑–µ—Ä–∞
      const candidate = await pool.query(`SELECT * FROM ?? WHERE ?? = ?`, [tableOne, fieldTwoTableOne, email] ).then((data) => {
        try {
          return data[0][0].email;
        } catch (error) {
          return false
        }
      })

      if (candidate) {
        return res.status(405).json({ massage: " –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
      }
      
    
      // –≤ –ª–æ–≥–∏–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ, —á—Ç–æ –≤ email –¥–æ —Å–∏–º–≤–æ–ª–∞ @, –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      let login = (email.split('@')[0])
      
      // —Ö–µ—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
      const hashedPassword = await bcrypt.hash(password, 12)
      // –∫–æ–≥–¥–∞ –ø–∞—Ä–æ–ª—å –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


      await pool.query(`INSERT INTO ?? (${new Array(fieldTableOne.length).fill('??')}) VALUES (NULL, ?, ?, ?, current_timestamp(),'')`, [
        tableOne, 
        fieldOneTableOne,
        fieldTwoTableOne, 
        fieldThreeTableOne,
        fieldFourTableOne,
        fieldFiveTableOne,
        fieldSixTableOne,  
        email, 
        hashedPassword,
        login
      ]).then((data) => {
        // –æ—Ç–≤–µ—á–∞–µ–º —Ñ—Ä–æ–Ω—Ç—ç–Ω–¥—É
        res.status(201).json({massage: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω'})
      })
      } catch (error) {
        res.status(500).json({ massage: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' })
      }
  },
)





// /api/auth/login
router.post(
  '/login',

  // –º–∞—Å—Å–∏–≤ –º–∏–¥–µ–ª–≤–µ–π—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–µ–ª–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é:
  [
    check('email', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email').normalizeEmail({ gmail_remove_dots:false } ).isEmail(),
    check('password', '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å').exists(), //–ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
  ],

  async (req, res) => {
    try {
      //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const errors = validationResult(req)

      //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      if (!errors.isEmpty()) {
        return res.status(400).json({
          errors: errors.array(),
          massage: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É',
        })
      }

      // –ø–æ–ª—É—á–∞–µ–º –∏–∑ request –ø–æ–ª—è
      const { email, password } = req.body

      // –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –∑–∞–ª–æ–≥–∏–Ω–µ—Ç—å—Å—è —É–∂–µ –Ω–µ –º–æ–∂–µ–º

      // const foundUser = "SELECT * FROM `users` WHERE `email` = '" + email + "'"
      const user = await pool.query(`SELECT * FROM ?? WHERE ?? = ?`, [
        tableOne,
        fieldTwoTableOne,
        email
      ]).then((data) => {
        try {
          return data[0][0];
          
        } catch (error) {
          return false
        }
      })


      if (!user) {
        return res.status(400).json({ massage: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
      }




      //? –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –µ–≥–æ –ø–∞—Ä–æ–ª–∏
      const isMatch = await bcrypt.compare(password, user.password)
      if (!isMatch) {
        return res.status(400).json({ massage: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' })
      }


      //—Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
      const token = jwt.sign(
        {
          userId: user.id,
        },
        config.get('jwtSecret'),
        {
          expiresIn: '1h',
        }, // —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç —Ç–æ–∫–µ–Ω —Å–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
      )

      console.log('üì¢ [auth.routes.js:254]', user);

      // –û–¢–í–ï–ß–ê–ï–ú –ù–ê –§–†–û–ù–î–≠–ù–î
      res.status(200).json({ token, userId: user.id, userLogin: user.login, avatar: user.avatar, massage:'–£—Å–ø–µ—à–Ω–æ' })
    } catch (error) {
      res.status(500).json({ massage: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' })
    }
  },
)




module.exports = router
